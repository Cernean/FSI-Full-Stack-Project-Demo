[{"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/App.js":"1","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/state/initialState.js":"2","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/LoginView.js":"3","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/NavBar.js":"4","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/CreateAccountView.js":"5","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/MessageActionBar.js":"6","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/InboxView.js":"7","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/ComposeMessageView.js":"8","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/_constants.js":"9","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/index.js":"10"},{"size":406,"mtime":1613681432838,"results":"11","hashOfConfig":"12"},{"size":110,"mtime":1613679224319,"results":"13","hashOfConfig":"12"},{"size":3720,"mtime":1613689068695,"results":"14","hashOfConfig":"12"},{"size":1058,"mtime":1613691252423,"results":"15","hashOfConfig":"12"},{"size":4434,"mtime":1613688698709,"results":"16","hashOfConfig":"12"},{"size":3145,"mtime":1613708263736,"results":"17","hashOfConfig":"12"},{"size":3128,"mtime":1613711551246,"results":"18","hashOfConfig":"12"},{"size":3989,"mtime":1613757356523,"results":"19","hashOfConfig":"12"},{"size":50,"mtime":1613679224318,"results":"20","hashOfConfig":"12"},{"size":169,"mtime":1613679224319,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"m30o32",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/App.js",["51"],"import { useEffect } from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport { AppRouter } from './AppRouter'\nimport { initialState } from './state/initialState';\nimport { reducer } from './state/reducer';\n\nconst store = createStore(reducer, initialState)\n\nexport function App() {\n  return (\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>\n  );\n}",["52","53"],"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/state/initialState.js",[],"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/LoginView.js",["54","55","56","57","58"],"import { TextField, Button, LinearProgress, Card, FormHelperText } from '@material-ui/core'\nimport { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { BACKEND_URL } from '../_constants'\n\nexport function LoginView() {\n\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [status, setStatus] = useState(null)\n    const [error, setError] = useState(null)\n\n    async function login() {\n        setStatus('pending')\n        let response = await fetch(`${BACKEND_URL}/auth`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ username, password })\n        })\n        let result = await response.json()\n        if (result.error) {\n            setStatus(null)\n            setError(result.error)\n        } else {\n            setStatus('success')\n            localStorage.setItem('token', result.token)\n            dispatch({ type: 'LOGIN', user: result.user })\n        }\n    }\n\n    return (\n        <div style={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <div style={{ flex: 1, maxWidth: 500 }}>\n                <div className=\"card\">\n                    {status === 'pending' &&\n                        <LinearProgress className=\"progress\" />\n                    }\n                    <div className=\"card-header\">\n                        <img src=\"assets/mailbox.png\"/>\n                        <h1>HackerMail</h1>\n                    </div>\n                    <div style={{ padding: '4%', display: 'flex', flexDirection: 'column' }}>\n                        <TextField\n                            error={error?.username?.message}\n                            helperText={error?.username?.message}\n                            disabled={status !== null}\n                            style={{ marginBottom: '4%' }}\n                            value={username}\n                            onChange={e => setUsername(e.target.value)}\n                            id=\"username\"\n                            label=\"Username\"\n                            variant=\"filled\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            error={error?.password?.message}\n                            helperText={error?.password?.message}\n                            value={password}\n                            disabled={status !== null}\n                            onChange={e => setPassword(e.target.value)}\n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Password\"\n                            variant=\"filled\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                        />\n                        {error?.message &&\n                            <FormHelperText error={true}>\n                                {error.message}\n                            </FormHelperText>\n                        }\n                        <button className=\"link\" disabled={status !== null} onClick={() => history.push('/create-account')}>\n                            Create Account\n                        </button>\n                        <button className=\"action\" disabled={status !== null} onClick={login}>\n                            Login\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}",["59","60"],"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/NavBar.js",["61"],"import { useState } from 'react'\nimport { Menu, MenuItem, Button } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\n\nexport function NavBar() {\n    const currentUser = useSelector(state => state.currentUser)\n    const dispatch = useDispatch()\n    const [button, setButton] = useState(null)\n    return (\n        <header>\n            <div>\n                <img src=\"assets/mailbox.png\"/>\n                <h1>HackerMail</h1>\n            </div>\n            <Button onClick={(e) => setButton(e.target)} style={{ color: '#eee' }}>\n                <PowerSettingsNewIcon/>\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={button}\n                keepMounted\n                open={Boolean(button)}\n                onClose={() => setButton(null)}\n            >\n                <MenuItem onClick={() => dispatch({ type: 'LOGOUT' })}>Logout {currentUser.name} </MenuItem>\n            </Menu>\n        </header>\n    )\n}","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/CreateAccountView.js",["62","63","64","65","66","67","68"],"import { TextField, Button, LinearProgress, Card, FormHelperText, Typography } from '@material-ui/core'\nimport { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { BACKEND_URL } from '../_constants'\n\nexport function CreateAccountView() {\n\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const [name, setName] = useState('')\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [status, setStatus] = useState(null)\n    const [error, setError] = useState(null)\n\n    async function createAccount() {\n        setStatus('pending')\n        let response = await fetch(`${BACKEND_URL}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ name, username, password })\n        })\n        let result = await response.json()\n        if (result.error) {\n            setStatus(null)\n            setError(result.error)\n        } else {\n            setStatus('success')\n            localStorage.setItem('token', result.token)\n            dispatch({ type: 'LOGIN', user: result.user })\n        }\n    }\n\n    return (\n        <div style={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <div style={{ flex: 1, maxWidth: 500 }}>\n                <div className=\"card\">\n                    {status === 'pending' &&\n                        <LinearProgress className=\"progress\" />\n                    }\n                    <div className=\"card-header\">\n                        <img src=\"assets/mailbox.png\"/>\n                        <h1>Create an Account</h1>\n                    </div>\n                    <div style={{ padding: '4%',  display: 'flex', flexDirection: 'column' }}>\n                        <TextField\n                            error={error?.name?.message}\n                            helperText={error?.name?.message}\n                            disabled={status !== null}\n                            style={{ marginBottom: '4%' }}\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                            id=\"name\"\n                            label=\"Name\"\n                            variant=\"filled\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            error={error?.username?.message}\n                            helperText={error?.username?.message}\n                            disabled={status !== null}\n                            style={{ marginBottom: '4%' }}\n                            value={username}\n                            onChange={e => setUsername(e.target.value)}\n                            id=\"username\"\n                            label=\"Username\"\n                            variant=\"filled\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            error={error?.password?.message}\n                            helperText={error?.password?.message}\n                            value={password}\n                            disabled={status !== null}\n                            onChange={e => setPassword(e.target.value)}\n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Password\"\n                            variant=\"filled\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                        />\n                        {error?.message &&\n                            <FormHelperText error={true}>\n                                {error.message}\n                            </FormHelperText>\n                        }\n                        <button className=\"link\" disabled={status !== null} onClick={() => history.push('/login')}>\n                            Already have an account?\n                        </button>\n                        <button className=\"action\" disabled={status !== null} onClick={createAccount}>\n                            Create\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/MessageActionBar.js",["69","70"],"import { Button, Card, Tooltip, Fab } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport UnreadIcon from '@material-ui/icons/Mail'\nimport ReadIcon from '@material-ui/icons/Drafts'\nimport EditIcon from '@material-ui/icons/Edit'\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BACKEND_URL } from \"./_constants\";\n\nexport function MessageActionBar() {\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n    const dispatch = useDispatch()\n    const noMessagesSelected = selectedMessageIds.length === 0\n\n    async function deleteMessages() {\n        const token = localStorage.getItem('token')\n        const response = await fetch(`${BACKEND_URL}/messages/delete`, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            },\n            method: 'POST',\n            body: JSON.stringify(selectedMessageIds)\n        })\n        const result = await response.json()\n        if (!result.error) {\n            dispatch({ type: 'DELETE_SELECTED_MESSAGES' })\n        }\n    }\n\n    async function markRead() {\n        const token = localStorage.getItem('token')\n        const response = await fetch(`${BACKEND_URL}/messages/read`, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            },\n            method: 'POST',\n            body: JSON.stringify(selectedMessageIds)\n        })\n        const result = await response.json()\n        if (!result.error) {\n            dispatch({ type: 'MARK_SELECTED_MESSAGES_READ' })\n        }\n    }\n\n    async function markUnread() {\n        const token = localStorage.getItem('token')\n        const response = await fetch(`${BACKEND_URL}/messages/unread`, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            },\n            method: 'POST',\n            body: JSON.stringify(selectedMessageIds)\n        })\n        const result = await response.json()\n        if (!result.error) {\n            dispatch({ type: 'MARK_SELECTED_MESSAGES_UNREAD' })\n        }\n    }\n\n    return (\n        <div className=\"action-bar\">\n            <Tooltip title=\"Delete\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={deleteMessages}>\n                    <DeleteIcon />\n                </Button>\n            </Tooltip>\n            <Tooltip title=\"Mark Unread\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={markUnread}>\n                    <UnreadIcon />\n                </Button>\n            </Tooltip>\n            <Tooltip title=\"Mark Read\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={markRead}>\n                    <ReadIcon />\n                </Button>\n            </Tooltip>\n            <Button id=\"compose\" color=\"primary\" onClick={() => dispatch({ type: 'OPEN_COMPOSE_MODAL' })}>\n                <EditIcon style={{ marginRight: '0.2em' }}/> COMPOSE\n            </Button>\n        </div>\n    )\n}","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/InboxView.js",["71"],"import { Avatar, Icon, List, ListItem, ListItemIcon, ListItemText, ListItemSecondaryAction } from \"@material-ui/core\";\nimport CheckIcon from '@material-ui/icons/Check'\n\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MessageActionBar } from \"../MessageActionBar\";\n\nexport function InboxView() {\n    const dispatch = useDispatch()\n    const currentUser = useSelector(state => state.currentUser)\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n\n    function toggleMessage(id, e) {\n        e.stopPropagation()\n        if (selectedMessageIds.includes(id)) {\n            dispatch({ type: 'UNSELECT_MESSAGE', id })\n        } else {\n            dispatch({ type: 'SELECT_MESSAGE', id })\n        }\n    }\n\n    function unSelectAll() {\n        dispatch({ type: 'UNSELECT_ALL_MESSAGES' })\n    }\n\n    return (\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n            <MessageActionBar />\n            <div style={{ flex: 1 }} onClick={unSelectAll}>\n                <List className=\"inbox\" style={{ margin: '0 auto 2em auto' }}>\n                    {currentUser.inbox.map(message => (\n                        <MessageCard className=\"email\" key={message._id} message={message} onClick={(e) => toggleMessage(message._id, e)} />\n                    ))}\n                </List>\n            </div>\n        </div>\n    )\n}\n\nfunction MessageCard(props) {\n    const message = props.message\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n    const sent = formatDate(message.sent)\n    const defaultColor = message.isRead ? undefined : '#e0c08b'\n    return (\n        <ListItem onClick={props.onClick}>\n            <ListItemIcon>\n                <Avatar style={{ backgroundColor: selectedMessageIds.includes(message._id) ? '#5D3ED2' : defaultColor }}>\n                    {selectedMessageIds.includes(message._id)\n                        ? <CheckIcon />\n                        : message.from.slice(0, 1)\n                    }\n                </Avatar>\n            </ListItemIcon>\n            <ListItemText\n                style={{ maxWidth: '80%', userSelect: 'none' }}\n                primary={(\n                    <span className=\"subject\" style={{ opacity: message.isRead ? '0.6' : '1', fontWeight: message.isRead ? '200' : '500' }}>\n                        {message.from}: {message.subject}\n                    </span>\n                )}\n                secondary={(\n                    <span className=\"body\" style={{ opacity: message.isRead ? '0.6' : '1', fontWeight: message.isRead ? '100' : '400' }}>\n                        {message.content}\n                    </span>\n                )}\n            />\n            <ListItemSecondaryAction>\n                <ListItemText\n                    secondary={\n                        <span className=\"date\">{sent}</span>\n                    }\n                />\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nfunction formatDate(dateStr) {\n    let date = new Date(dateStr)\n    let dateString = date.toString()\n    return `${date.getDate()} ${dateString.split(' ')[1]}`\n}","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/views/ComposeMessageView.js",["72","73","74","75","76","77","78"],"import { TextField, Button, LinearProgress, FormHelperText, Typography, Drawer, Modal } from '@material-ui/core'\nimport { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { BACKEND_URL } from '../_constants'\n\nexport function ComposeMessageView() {\n\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const composeModalOpen = useSelector(state => state.composeModalOpen)\n\n    const [username, setUsername] = useState('')\n    const [subject, setSubject] = useState('')\n    const [content, setContent] = useState('\\n\\n\\n')\n    const [status, setStatus] = useState(null)\n    const [error, setError] = useState(null)\n\n    async function createAccount() {\n        setStatus('pending')\n        let token = localStorage.getItem('token')\n        let response = await fetch(`${BACKEND_URL}/messages`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ username, subject, content })\n        })\n        let result = await response.json()\n        if (result.error) {\n            setStatus(null)\n            setError(result.error)\n        } else {\n            setUsername('')\n            setSubject('')\n            setContent('\\n\\n\\n')\n            setStatus(null)\n            dispatch({ type: 'CLOSE_COMPOSE_MODAL' })\n            // dispatch({ type: 'LOGIN', user: result.user })\n        }\n    }\n\n    return (\n        <Drawer anchor=\"right\" open={composeModalOpen} onClose={() => dispatch({ type: 'CLOSE_COMPOSE_MODAL' })}>\n            {status === 'pending' &&\n                <LinearProgress />\n            }\n            <div className=\"compose-drawer\">\n                <h2>Compose Message:</h2>\n                <TextField\n                    error={error?.username?.message}\n                    helperText={error?.username?.message}\n                    disabled={status !== null}\n                    style={{ marginBottom: '4%' }}\n                    value={username}\n                    onChange={e => setUsername(e.target.value)}\n                    id=\"username\"\n                    label=\"To\"\n                    placeholder=\"Username\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    error={error?.subject?.message}\n                    helperText={error?.subject?.message}\n                    disabled={status !== null}\n                    style={{ marginBottom: '4%' }}\n                    value={subject}\n                    onChange={e => setSubject(e.target.value)}\n                    id=\"subject\"\n                    label=\"Subject\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    error={error?.content?.message}\n                    helperText={error?.content?.message}\n                    value={content}\n                    disabled={status !== null}\n                    onChange={e => setContent(e.target.value)}\n                    type=\"content\"\n                    id=\"content\"\n                    label=\"Content\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    multiline={true}\n                />\n                {error?.message &&\n                    <FormHelperText error={true}>\n                        {error.message}\n                    </FormHelperText>\n                }\n                <div style={{ display: 'flex', flexDirection: 'row-reverse', marginTop: '4%' }}>\n                    <button disabled={status !== null} onClick={createAccount}>\n                        Send\n                    </button>\n                </div>\n            </div>\n        </Drawer>\n    )\n}","/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/_constants.js",[],"/Users/jerrica/Desktop/sandbox/1.13-full-stack-project-demo/frontend/src/index.js",[],{"ruleId":"79","severity":1,"message":"80","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":19},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"79","severity":1,"message":"87","line":1,"column":21,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"88","line":1,"column":45,"nodeType":"81","messageId":"82","endLine":1,"endColumn":49},{"ruleId":"89","severity":1,"message":"90","line":45,"column":25,"nodeType":"91","endLine":45,"endColumn":56},{"ruleId":"92","severity":1,"message":"93","line":60,"column":29,"nodeType":"94","endLine":60,"endColumn":47},{"ruleId":"92","severity":1,"message":"93","line":73,"column":29,"nodeType":"94","endLine":73,"endColumn":47},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},{"ruleId":"89","severity":1,"message":"90","line":13,"column":17,"nodeType":"91","endLine":13,"endColumn":48},{"ruleId":"79","severity":1,"message":"87","line":1,"column":21,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"88","line":1,"column":45,"nodeType":"81","messageId":"82","endLine":1,"endColumn":49},{"ruleId":"79","severity":1,"message":"97","line":1,"column":67,"nodeType":"81","messageId":"82","endLine":1,"endColumn":77},{"ruleId":"89","severity":1,"message":"90","line":46,"column":25,"nodeType":"91","endLine":46,"endColumn":56},{"ruleId":"92","severity":1,"message":"93","line":61,"column":29,"nodeType":"94","endLine":61,"endColumn":47},{"ruleId":"92","severity":1,"message":"93","line":74,"column":29,"nodeType":"94","endLine":74,"endColumn":47},{"ruleId":"92","severity":1,"message":"93","line":87,"column":29,"nodeType":"94","endLine":87,"endColumn":47},{"ruleId":"79","severity":1,"message":"88","line":1,"column":18,"nodeType":"81","messageId":"82","endLine":1,"endColumn":22},{"ruleId":"79","severity":1,"message":"98","line":1,"column":33,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"99","line":1,"column":18,"nodeType":"81","messageId":"82","endLine":1,"endColumn":22},{"ruleId":"79","severity":1,"message":"87","line":1,"column":21,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"97","line":1,"column":61,"nodeType":"81","messageId":"82","endLine":1,"endColumn":71},{"ruleId":"79","severity":1,"message":"100","line":1,"column":81,"nodeType":"81","messageId":"82","endLine":1,"endColumn":86},{"ruleId":"79","severity":1,"message":"101","line":9,"column":11,"nodeType":"81","messageId":"82","endLine":9,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":64,"column":21,"nodeType":"94","endLine":64,"endColumn":39},{"ruleId":"92","severity":1,"message":"93","line":77,"column":21,"nodeType":"94","endLine":77,"endColumn":39},{"ruleId":"92","severity":1,"message":"93","line":90,"column":21,"nodeType":"94","endLine":90,"endColumn":39},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["102"],"no-negated-in-lhs",["103"],"'Button' is defined but never used.","'Card' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["102"],["103"],"'Typography' is defined but never used.","'Fab' is defined but never used.","'Icon' is defined but never used.","'Modal' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]